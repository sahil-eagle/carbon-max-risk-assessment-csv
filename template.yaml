AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  carbonriskassessmentbucket:
    Description: S3 Bucket BucketName
    Type: String  

Resources:
  SQSQueue:
    Type: AWS::SQS::Queue 
    Properties: 
      VisibilityTimeout: 60   

  # CarbonCreditLambdaExecutionRole: 
  #   Type: AWS::IAM::Role
  #   Properties: 
  #     AssumeRolePolicyDocument: 
  #       Version: '2012-10-17'
  #       Statement: 
  #       - Effect: Allow
  #         Principal: 
  #           Service: lambda.amazonaws.com
  #         Action: 
  #         - sts:AssumeRole
  #     Path: '/'
  #     Policies: 
  #     - PolicyName: logs
  #       PolicyDocument: 
  #         Statement: 
  #         - Effect: Allow
  #           Action: 
  #           - logs:CreateLogGroup
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #           Resource: arn:aws:logs:*:*:*
  #     - PolicyName: sqs
  #       PolicyDocument: 
  #         Statement: 
  #         - Effect: Allow
  #           Action: 
  #           - sqs:ReceiveMessage
  #           - sqs:SendMessage
  #           - sqs:DeleteMessage
  #           - sqs:GetQueueAttributes
  #           Resource: !Sub ${SQSQueue.Arn}      

  SQSAccessPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:SendMessage"
            Effect: Allow
            Resource: !GetAtt SQSQueue.Arn
            Principal: "*"
            Condition:
              ArnLike:
                aws:SourceArn: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref carbonriskassessmentbucket

  carbonrisktemplatbucket:
    Type: AWS::S3::Bucket
    DependsOn: SQSAccessPolicy
    Properties:
      BucketName: !Ref carbonriskassessmentbucket
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SQSQueue.Arn

  LambdaSourceMappingRiskAssessment:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - SQSQueue
      - SQSTriggeredLambdaHandler
    Properties:
      BatchSize: 5
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !GetAtt SQSTriggeredLambdaHandler.Arn

  SQSTriggeredLambdaHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: csv-upload
      Handler: csv-upload
      # Role: !Sub ${CarbonCreditLambdaExecutionRole.Arn}
      Description: Function that is called when a file is stored in S3.
      Runtime: go1.x
      MemorySize: 128
      Timeout: 30
      Policies:
        - AmazonDynamoDBFullAccess
  RiskAssessmentComputeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: risk-assessment-compute
      Handler: risk-assessment-compute
      
      Description: Risk assessment function that is called by Dynamodb streams.
      Runtime: go1.x
      MemorySize: 128
      Timeout: 30
      Policies:
        - AmazonDynamoDBFullAccess

  RiskAssessmentTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "pk" 
          AttributeType: "S"
        - 
          AttributeName: "sk"
          AttributeType: "S"        
      KeySchema: 
        - 
          AttributeName: "pk"
          KeyType: "HASH"
        - 
          AttributeName: "sk"
          KeyType: "RANGE"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES        
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "RiskAssessmentTable"

  RiskAssessmentDynamoDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # The maximum number of DB items to send to Lambda
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt RiskAssessmentTable.StreamArn
      FunctionName: !GetAtt RiskAssessmentComputeFunction.Arn
      # Always start at the tail of the Stream
      StartingPosition: LATEST